Welcome to the Help guide for DigiCAD! This is not the final version, and still
requires some details. 
General syntax: All the commands use the same format: 
<command name> <argument1> <argument2>....

Developed by: Udey Rishi & Raghav Vamaraju, 2014
If some functions don't have the syntax specified, use the above one.
--------------
Please refrain yourself from using any brackets while passing arguments; 
the interpreter will not understand it. HOWEVER, use as many brackets as 
you want for making the Boolean BDMAS priority sequence less confusing.

Please seperate all the variables, and/or operators with a space, else the 
interpreter will try to read it as 1 command/variable name/operator.

Development Notes:
------------------
The current version does not have the capability of piping the outputs
directly to another command. However, all the calculated values are directly stored 
in the workspace. (These calc values can be deleted, see command del). For complex 
calculations, do the processing step by step, involving workspace storage at each 
step. Combining multiple BFs from workspace is allowed, but is not done using def.
Just go BF1 <operator> BF2, or use a command

Commands:

The number(s) in the list suggest the possible number of allowed arguments.
----------
----------


clear : [0]
----------
Clears the current terminal screen. Identical to clear in ipython or 
linux terminal.


flash : [0]
-----------
Displays the welcome flash message.


help : [0, 1]
-------------
Launches help. If no argument is given, opens the general manual; if 
command name is given as an argument, displays the help contents for that
command.

e.g. help clear


workspace : [0]
---------------
Displays the contents of the current workspace.


gui : [0]
---------
Launches the DigiCAD in GUI mode. Make sure that the file gui.py
is in the same directory, and is executable.

This command works only in Linux/UNIX in the current version of DigiCAD.


def : []
--------
Defines a new Boolean Function using Boolean vars. The arguments is undeterminate/
Used only for creating a new BF using variables; for combining other BFs, just 
use BF1 <operator> BF2.

e.g.: def f(a,b) = a + b
or def a + b
or def f = a +b

In the lack of a function name (e.g. 2), a function name will be generated 
automatically to prevent conflicts. If BF assignment causes conflict in the 
workspace, it will prompt before overwriting.


expression : [1]
----------------
Displays the BF expression of the BF.

e.g. def f = a + b
     expression f
     OUTPUT: a + b


display_BF : [1]
----------------
Identical to expression, except displays the entire BF in its proper 
format.


del : [0,1]
---------
Deletes the function from the workspace, if an argument is passed. Else empties
the entire workspace.
e.g. del f


minterms : [1]
--------------
Returns the minterms of the BF.

e.g. minterms f


maxterms : [1]
--------------
Returns the maxterms of the BF.

e.g. maxterms f


mintermsl : [1]
---------------
Returns the minterms in a long notation, grouping the minterms by the number of 
1s.

e.g. mintermsl f


maxtermsl : [1]
---------------
Returns the maxterms in a long notation, grouping the maxterms by the number of 
0s. The total number of bits == the total number of variables in the BF.

e.g. maxtermsl f


variables : [1]
---------------
Returns the variables used in a bf

e.g. variables f


truthtable : [1]
----------------
Returns the truth table of the function.

e.g. truthtable f


equal: []
---------
Can take as many BFs as arguments. Returns True if all of them are equal, 
otherwise False.

Alternate notation: f1 == f2 (usable for just 2 BFs though)


or : []
-------
Can take as many BFs as arguments. Returns the or-ed function using all of them.

Alternate notation: f1 + f2


and : []
--------
Can take as many BFs as arguments. Returns the and-ed function using all of them.

Alternate notation: f1 * f2


xor : []
--------
Can take as many BFs as arguments. Returns the xor-ed function using all of them.

Alternate notation: f1 % f2


not : [1]
---------
Returns the not-ed notation.

Alternate notation: f1 '
                    ~ f1


nor : []
--------
Finds the nor of indeterminate number of functions.


nand : []
---------
Finds the nand of indeterminate number of functions.


min_exp : [1]
-------------
Finds the minterm expandsion of the function given as argument.


max_exp : [1]
-------------
Finds the maxterm expandsion of the function given as argument.


sub : [2]
---------
argument1 = function, argument2 = value to be substituted in

Returns the truth value of the Boolean Function at the given value


minimise : [1]
--------------
Simplifies and returns the minimum sop form of the BF. Using Quin-McCluskey 
Algorithm.
Runtime: big-Omega(3^n/n), n = # of variables. 
Tested utility for functions containing <10 variables.
Independent of the complexity of the actual BF.


num_ones : [1,2]
----------------
Returns the number of ones in the binary expansion of a number.

Arg1 = The number, Arg2 = Base (10 Default)


num_zeros : [2,3]
-----------------
Returns the number of zeroes in the binary expansion of a number.

Arg1 = The number, Arg2, = The number of LSBs to be considered
Arg3 = Base of the given number (10 Default)


binary : [2,3]
--------------
Returns the binary form notation of the number.

Arg1 = The number, Arg2, = The number of LSBs to be considered
Arg3 = Base of the given number (10 Default)

rename : [2]
------------
Renames the BF in workspace.

Arg1 = current name in workspace, Arg2 = New name in workspace

